# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import precision_recall_curve
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score

-------------------------------------------------------------------------------------

# Read dataset
df_net = pd.read_csv('Social_Network_Ads.csv')
df_net.head()

-----------------------------------------------------------------------------------
# Get required data
df_net.drop(columns = ['User ID'], inplace=True)
df_net.head()
-------------------------------------------------------

# Describe data
df_net.describe()

---------------------------------------------------------------------

# Salary distribution
sns.distplot(df_net['EstimatedSalary'])

-------------------------------------------------------------------

# Label encoding
le = LabelEncoder()
df_net['Gender']= le.fit_transform(df_net['Gender'])

--------------------------------------------------------------------
# Correlation matrix
df_net.corr()

--------------------------------------------------------------

sns.heatmap(df_net.corr())

----------------------------------------------------

# Drop Gender column
df_net.drop(columns=['Gender'], inplace=True)
df_net.head()

----------------------------------------------------

# Relationship between Age and Salary
plt.scatter(df_net['Age'], df_net['EstimatedSalary'])

--------------------------------------------------------------

# Split data into dependent/independent variables
X = df_net.iloc[:, :-1].values
y = df_net.iloc[:, -1].values

-----------------------------------------------------------------------------

# Split data into test/train set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = True)

-------------------------------------------------------------------------

# Scale dataset
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

---------------------------------------------------------------------
Train model

# Classifier
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

-----------------------------------------------------------------

LogisticRegression(random_state=0)

---------------------------------------------------------------------

Predict result / Score model

# Prediction
y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))

---------------------------------------------------------------------------------

Evaluate model
Accuracy

# Accuracy
accuracy_score(y_test, y_pred)

-----------------------------------------------------------------------------

Classification report

# Classification report
print(f'Classification Report: \n{classification_report(y_test, y_pred)}')
     
----------------------------------------------------------------------------------
     
F1 score

# F1 score
print(f"F1 Score : {f1_score(y_test, y_pred)}")
     
-----------------------------------------------------------------------
     
Confusion matrix

# Confusion matrix
cf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(cf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)

-----------------------------------------------------------------------------

Precision-Recall curve

# Plot Precision-Recall Curve
y_pred_proba = classifier.predict_proba(X_test)[:,1]
precision, recall, thresholds = precision_recall_curve(y_test, y_pred_proba)

plt.plot(recall, precision, label='Logistic Regression', color = 'firebrick')
plt.title('Precision-Recall Curve')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.box(False)
plt.show()

--------------------------------------------------------------------------------

AUC/ROC curve

# Plot AUC/ROC curve
y_pred_proba = classifier.predict_proba(X_test)[:,1]
fpr, tpr, thresholds = metrics.roc_curve(y_test,  y_pred_proba)

plt.plot(fpr, tpr, label='Logistic Regression', color = 'firebrick')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.box(False)
plt.show()

-------------------------------------------------------------------------------

Check example

# Predict purchase with Age(45) and Salary(97000)
print(classifier.predict(sc.transform([[45, 97000]])))

--------------------------------------------------------------------------




















